head(plants)
head(plants, n=10)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20,10)
LETTERS
sample(LETTERS)
sample(c(0,1), 100, replace = TRUE)
sample(c(0,1), 100,replace = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100,replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
lkj
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(n=100, size=1, prob=0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean=100, sd=25)
?rpois
rpois(5, 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
exit()
info()
main()
main()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(d1)
months(t1)
quarters(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
install.packages("caret")
data(AlzheimerDisease)
library(caret)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
trainIndex
library(AppliedPredictiveModeling)
data(concrete)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
mixtures
head(mixtures)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
inTrain
training = mixtures[inTrain,]
testing = mixtures[-inTrain,]
index(training$CompressiveStrength)
inTrain
qplot(training$CompressiveStrength,inTrain,data=training)
qplot(inTrain,training$CompressiveStrength)
head(training)
featurePlot(x=training, y = training$CompressiveStrength, plot="pairs")
featurePlot(x=training[,c("FlyAsh")], y = training$CompressiveStrength, plot="pairs")
qplot(CompressiveStrength,FlyAsh,data=training)
qplot(CompressiveStrength,inTrain,data=training)
qplot(CompressiveStrength,inTrain,colour=jobclass,data=training)
qplot(CompressiveStrength,inTrain,colour=FlyAsh,data=training)
cutWage <- cut2(training$wage,g=3)
cutWage <- cut2(training$FlyAsh,g=3)
install.packages("Hmisc")
library(Hmisc)
cutWage <- cut2(training$FlyAsh,g=3)
qplot(age,wage,colour=cutWage,data=training)
qplot(CompressiveStrength,inTrain,colour=cutWage,data=training)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[inTrain,]
testing = mixtures[-inTrain,]
hist(training$SuperPlasticizer)
hist(as.numeric(training$SuperPlasticizer))
training$SuperPlasticizer
HEAD(training)
head(training)
hist(training$Superplasticizer)
min(training$Superplasticizer)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(training)
grep("IL_",colnames(training))
training[,grep("IL_",colnames(training))]
variables_IL = training[,grep("IL_",colnames(training))]
preProcess(variables_IL,thresh = 0.9)
kk = preProcess(variables_IL,thresh = 0.9)
kk
kk = preProcess(variables_IL,method="pca",thresh = 0.9)
preProcess(variables_IL,method="pca",thresh = 0.9)
variables_IL$diagnosis = training$diagnosis
head(variables_IL)
variables_IL$TRAIL_R3
variables_IL = training[,grep("IL_",colnames(training))]
variables_IL$TRAIL_R3
preProcess(variables_IL,method="pca",thresh = 0.9)
head(variables_IL)
variables_IL = training[,grep("IL_",colnames(training))]
variables_IL$TRAIL_R3  = NULL
preProcess(variables_IL,method="pca",thresh = 0.9)
variables_IL$diagnosis = training$diagnosis
head(variables_IL)
variables_IL = training[,grep("IL_",colnames(training))]
variables_IL$TRAIL_R3  = NULL
preProcess(variables_IL,method="pca",thresh = 0.8)
modelFit <- train(diagnosis ~.,data=traininSet, method="glm")
traininSet = cbind(variables_IL, training$diagnosis)
head(traininSet)
traininSet = cbind(variables_IL, diagnosis=training$diagnosis)
head(traininSet)
modelFit <- train(diagnosis ~.,data=traininSet, method="glm")
modelFit <- train(variables_IL, trainingSet$diagnosis, method="glm")
trainingSet = cbind(variables_IL, diagnosis=training$diagnosis)
modelFit <- train(variables_IL, trainingSet$diagnosis, method="glm")
install.packages('e1071', dependencies=TRUE)
library(caret)
modelFit <- train(variables_IL, trainingSet$diagnosis, method="glm")
modelFit
preProc <- preProcess(variables_IL,method="pca",thresh = 0.8)
trainPC <- predict(preProc,variables_IL)
modelFit <- train(trainingSet$diagnosis,method="glm",data=trainPC)
trainPC
head(trainPC)
modelFit <- train(trainingSet$diagnosis ~ .,method="glm",data=trainPC)
modelFit
modelFit <- train(trainingSet, trainingSet$diagnosis, method="glm")
modelFit
trainingSet
variables_IL = training[,grep("IL_",colnames(training))]
variables_IL$TRAIL_R3  = NULL
preProcess(variables_IL,method="pca",thresh = 0.8)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
set.seed(125)
set.seed(125)
inTrain <- createDataPartition(y=segmentationOriginal$Case, p=0.7, list=FALSE)
training <- data[inTrain,]
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
head(segmentationOriginal)
modFit <- train(Case ~ .,method="rpart",data=segmentationOriginal)
print(modFit, digits=3)
unique(segmentationOriginal$Case)
data.frame(TotalIntench2 = 50,000, FiberWidthCh1 = 10, VarIntenCh4 = 100)
b = data.frame(TotalIntench2 = 50,000, FiberWidthCh1 = 10, VarIntenCh4 = 100)
b
b = data.frame(TotalIntench2 = 50000, FiberWidthCh1 = 10, VarIntenCh4 = 100)
b
d = data.frame(FiberWidthCh1 = 8;VarIntenCh4 = 100; PerimStatusCh1=2)
d = data.frame(FiberWidthCh1 = 8,VarIntenCh4 = 100,PerimStatusCh1=2)
predict(modFit, newData=b)
predict(modFit, newdata=b)
segmentationOriginal$Cell
testing[FiberWidthCh1 == 8 & VarIntenCh4 == 100 & PerimStatusCh1==2,]
testing[testing$FiberWidthCh1 == 8 & testing$VarIntenCh4 == 100 & testing$PerimStatusCh1==2,]
testing[testing$TotalIntench2 == 50000 & testing$FiberWidthCh1 == 10 & testing$VarIntenCh4==100,]
testing$FiberWidthCh1
b
predict(modFit, newdata=b)
predict(modFit, newdata=d)
training[training$TotalIntench2 == 50000 & training$FiberWidthCh1 == 10 & training$VarIntenCh4==100,]
testingB = testing[1,]
testingB
library(pgmm)
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
head(olive)
inTrain <- createDataPartition(y=olive$Area, p=0.7, list=FALSE)
training <- olive[inTrain,]
testing <- olive[-inTrain,]
training <- olive[inTrain,]
testing <- olive[-inTrain,]
train(Area ~ .,method="rpart",data=training)
modFit = train(Area ~ .,method="rpart",data=training)
print(modFit$finalModel)
plot(modFit$finalModel, uniform=TRUE, main="Classification Tree")
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
library(rattle)
install.packages("rattle")
fancyRpartPlot(modFit$finalModel)
library(rattle)
fancyRpartPlot(modFit$finalModel)
libary(rpart)
library(rpart)
fancyRpartPlot(modFit$finalModel)
predict(modFit, newdata = as.data.frame(t(colMeans(olive))))
as.data.frame(t(colMeans(olive))
)
modFit = train(Area ~ .,method="rpart",data=olive)
predict(modFit, newdata = as.data.frame(t(colMeans(olive))))
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
head(trainSA)
modFit = train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method="glm")
modFit = train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method="glm", data=trainSA)
prediction = predict(modFit, newdata=testSA)
prediction
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass
set.seed(13234)
modFit = train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method="glm", data=trainSA)
prediction = predict(modFit, newdata=testSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
prediction2 = predict(modFit, newdata=trainingSA)
prediction2 = predict(modFit, newdata=trainSA)
missClass(trainSA$chd,prediction2)
missClass(testSA$chd,prediction)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train = as.factor(vowel.train)
vowel.train$y = as.factor(vowel.train$y)
set.seed(33833)
vowel.test$y = as.factor(vowel.test$y)
set.seed(33833)
modelFit <- train(vowel.train$y ~ ., method="rf", trControl=trainControl(method = "cv", number = 4), data=vowel.train)
varImp(modelFit)
library(pgmm)
data(olive)
olive = olive[,-1]
training <- olive[inTrain,]
testing <- olive[-inTrain,]
modFit = train(Area ~ .,method="rpart",data=olive)
print(modFit$finalModel)
plot(modFit$finalModel, uniform=TRUE, main="Classification Tree")
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
predict(modFit, newdata = as.data.frame(t(colMeans(olive))))
modFit = train(Area ~ .,method="rpart",data=training)
predict(modFit, newdata = as.data.frame(t(colMeans(olive))))
inTrain <- createDataPartition(y=olive$Area, p=1, list=FALSE)
training <- olive[inTrain,]
predict(modFit, newdata = as.data.frame(t(colMeans(olive))))
inTrain <- createDataPartition(y=olive$Area, p=0.6, list=FALSE)
training <- olive[inTrain,]
testing <- olive[-inTrain,]
modFit = train(Area ~ .,method="rpart",data=training)
predict(modFit, newdata = as.data.frame(t(colMeans(olive))))
inTrain <- createDataPartition(y=olive$Area, p=0.7, list=FALSE)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
modFit = train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method="glm", data=trainSA,  family = binomial)
prediction = predict(modFit, newdata=testSA)
prediction2 = predict(modFit, newdata=trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd,prediction2)
missClass(testSA$chd,prediction)
setwd("~/Google Drive/Coursera/DataProducts/Project")
library(shiny)
install.packages("shiny")
library(shiny)
library(shiny)
library(googleVis)
library(shinyapp)
install.packages("shinyapp")
runApp()
ids = unique(read.csv("events_mp.csv")$pos)
ids
ids = unique(read.csv("events_mp.csv", stringsAsFactors=FALSE)$pos)
ids
runApp()
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
allData = read.csv("events_mp.csv")
allData$start = as.POSIXct(allData$start)
allData$end = as.POSIXct(allData$end)
allData[,c("type","label","start","end")]
setwd("~/Google Drive/Coursera/DataProducts/Example")
runApp(display.mode = "showcase")
install.packages("googleCharts")
install_github("jcheng5/googleCharts")
install.packages("install_github")
devtools::install_github("jcheng5/googleCharts")
install.packages("devtools")
devtools::install_github("jcheng5/googleCharts")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
setwd("~/Google Drive/Coursera/DataProducts/googleCharts/inst/examples/timeline")
runApp(display.mode = "showcase")
setwd("~/Google Drive/Coursera/DataProducts/googleCharts/inst/examples/bubble")
runApp(display.mode = "showcase")
setwd("~/Google Drive/Coursera/DataProducts/googleCharts/inst/examples/calendar")
runApp(display.mode = "showcase")
setwd("~/Google Drive/Coursera/DataProducts/googleCharts/inst/examples/test")
runApp(display.mode = "showcase")
runApp()
runApp()
runApp()
runApp()
setwd("~/Google Drive/Coursera/DataProducts/Project")
runApp()
deaths = read.csv("SpanishRoadDeaths.csv")
deaths
runApp()
runApp()
deaths[,c("year","total")]
runApp()
data = deaths[deaths$year="2013"]
data = deaths[deaths$year=="2013"]
data = deaths[deaths$year=="2013",]
data
data = deaths[deaths$year=="2013",]
transpose <- as.data.frame(t(data))
transpose
t(data)
colnames(data) <- data[1, ]
colnames(data) <- data[1, ]
colnames(transpose) <- transpose[1, ]
transpose <- transpose[-1, ]
transpose
data = deaths[deaths$year=="2013",]
transpose <- as.data.frame(t(data))
colnames(transpose) <- transpose[1, ]
transpose <- transpose[-1, ]
transpose
data = deaths[deaths$year=="2013",]
transpose <- as.data.frame(t(data))
transpose
colnames(transpose) <- c("type","value")
runApp()
runApp()
pieData = data.frame(vehicle=colnames(data[,1:8]))
pieData
pieData = data.frame(vehicle=colnames(data[,2:8]))
data[,2:8]
data[1,2:8]
pieData$deaths = data[,2:8]
as.vector(data[,2:8])
as.vector(data[,2:8])
pieData$deaths = as.vector(data[,2:8])
pieData$deaths = as.vector(t(data[,2:8])
)
pieData
runApp()
data = deaths[deaths$year=="2013",]
pieData = data.frame(vehicle=colnames(data[,2:8]))
pieData$deaths = as.vector(t(data[,2:8]))
runApp()
pieData
runApp()
colnames(deaths[deaths$year=="2013",][,2:8])
t(deaths[deaths$year=="2013",][,2:8])
runApp()
deathsByYear= deaths[deaths$year=="2013",]
runApp()
as.vector(deathsByYear)
kk = as.vector(deathsByYear)
kk = as.numeric(deathsByYear)
kk
runApp()
runApp()
runApp()
deathsByYear= deaths[deaths$year=="2013",]
deathsByYear
deathsByYear= deaths[deaths$year=="2013" | deaths$year=="2012,]
)
deathsByYear= deaths[deaths$year=="2013" | deaths$year=="2012",]
deathsByYear
aggre = colSums(deathsByYear)
deathsByYear = as.numeric(deathsByYear)
summary(deathsByYear)
colSums(deathsByYear)
deathsByYear$year = NULL
deathsByYear$total = NULL
aggre = colSums(deathsByYear)
deathsByYear
classs(deathsByYear)
class(deathsByYear)
deathsRange = deathsRange()
deathsRange <- reactive({
deaths[deaths$year >= input$range[1] & deaths$year <= input$range[2],]
})
data = deathsRange()
aggregate(deathsByYear, FUN=sum)
colSums(Filter(is.numeric, deathsByYear))
deathsByYear
deaths = read.csv("SpanishRoadDeaths.csv")
deathsByYear= deaths[deaths$year=="2013" | deaths$year=="2012",]
deathsByYear$year = NULL
deathsByYear$total = NULL
aggre = colSums(deathsByYear)
aggre
runApp()
runApp()
runApp()
runApp()
deaths
deaths$year = NULL
deaths$total = NULL
deaths
aggre = colSums(deaths)
aggre
data.frame(colnames(deathsRange),aggre)
data.frame(colnames(deaths),aggre)
data.frame(type = colnames(deaths), deaths=aggre, row.names=FALSE)
data.frame(type = colnames(deaths), deaths=aggre)
aggre
aggre[1,]
aggre[1]
as.vector(aggre)
data.frame(type = (deaths), deaths=as.vector(aggre), row.names=FALSE)
data.frame(type = (deaths), deaths=as.vector(aggre))
data.frame(type = colnames(deaths), deaths=as.vector(aggre))
runApp()
runApp()
runApp()
shinyapps::setAccountInfo(name='javilinares',token='E44E85308A4F2E48AA8C832D7BCE81C3',secret='qkhFMXgOQhjwAVnqzPhcXNSflFQjmuaLuLWmkHl4')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='javilinares',token='E44E85308A4F2E48AA8C832D7BCE81C3',secret='qkhFMXgOQhjwAVnqzPhcXNSflFQjmuaLuLWmkHl4')
library(shinyapps)
shinyapps::deployApp('')
deployApp()
runApp()
mean(deaths$total)
deaths = read.csv("SpanishRoadDeaths.csv")
deaths
mean(deaths$total)
runApp()
runApp()
install_github('slidify','ramnathv')
library(devtools)
install_github('slidify','ramnathv')
install_github('slidifyLibraries','ramnathv')
setwd("~/Google Drive/Coursera/DataProducts/Slidify")
library(slidify)
author('spanish_deaths')
setwd("~/Google Drive/Coursera/DataProducts/Slidify/spanish_deaths")
slidify('index.Rmd')
library(knitr)
library(knitr)
install.packages('knitr')
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
library(knitr)
slidify('index.Rmd')
library(slidify)
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
